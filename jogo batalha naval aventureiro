#include <stdio.h>
#include <stdlib.h>  // Para abs()

#define TAMANHO_TABULEIRO 10
#define TAMANHO_NAVIO 3
#define NAVIO 3
#define AGUA 0
#define HABILIDADE 5
#define TAMANHO_HABILIDADE 5  // Matrizes 5x5

// Inicializa o tabuleiro com água
void inicializarTabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            tabuleiro[i][j] = AGUA;
        }
    }
}

// Verifica se o navio pode ser posicionado
int podePosicionar(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int l, int c, int o) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        int linha = l, coluna = c;
        if (o == 0) coluna += i;
        else if (o == 1) linha += i;
        else if (o == 2) linha += i, coluna += i;
        else if (o == 3) linha += i, coluna -= i;

        if (linha < 0 || linha >= TAMANHO_TABULEIRO || coluna < 0 || coluna >= TAMANHO_TABULEIRO)
            return 0;
        if (tabuleiro[linha][coluna] != AGUA)
            return 0;
    }
    return 1;
}

// Posiciona o navio no tabuleiro
void posicionarNavio(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int l, int c, int o) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        int linha = l, coluna = c;
        if (o == 0) coluna += i;
        else if (o == 1) linha += i;
        else if (o == 2) linha += i, coluna += i;
        else if (o == 3) linha += i, coluna -= i;

        tabuleiro[linha][coluna] = NAVIO;
    }
}

// Cria forma de cone (pirâmide invertida)
void criarHabilidadeCone(int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int meio = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            habilidade[i][j] = (j >= meio - i && j <= meio + i) ? 1 : 0;
        }
    }
}

// Cria forma de cruz
void criarHabilidadeCruz(int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int meio = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            habilidade[i][j] = (i == meio || j == meio) ? 1 : 0;
        }
    }
}

// Cria forma de octaedro (losango)
void criarHabilidadeOctaedro(int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE]) {
    int meio = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            habilidade[i][j] = (abs(i - meio) + abs(j - meio) <= meio) ? 1 : 0;
        }
    }
}

// Aplica a matriz da habilidade no tabuleiro
void aplicarHabilidade(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO],
                       int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE],
                       int origemLinha, int origemColuna) {
    int offset = TAMANHO_HABILIDADE / 2;
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            int linhaTab = origemLinha - offset + i;
            int colunaTab = origemColuna - offset + j;

            if (linhaTab >= 0 && linhaTab < TAMANHO_TABULEIRO &&
                colunaTab >= 0 && colunaTab < TAMANHO_TABULEIRO) {
                if (habilidade[i][j] == 1 && tabuleiro[linhaTab][colunaTab] == AGUA) {
                    tabuleiro[linhaTab][colunaTab] = HABILIDADE;
                }
            }
        }
    }
}

// Exibe o tabuleiro com legenda
void exibirTabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    printf("Legenda: 0=Água | 3=Navio | 5=Área de Habilidade\n");
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO];
    inicializarTabuleiro(tabuleiro);

    // Posiciona 4 navios com orientações diferentes
    if (podePosicionar(tabuleiro, 1, 2, 0)) posicionarNavio(tabuleiro, 1, 2, 0); // Horizontal
    if (podePosicionar(tabuleiro, 5, 7, 1)) posicionarNavio(tabuleiro, 5, 7, 1); // Vertical
    if (podePosicionar(tabuleiro, 0, 0, 2)) posicionarNavio(tabuleiro, 0, 0, 2); // Diagonal ↘
    if (podePosicionar(tabuleiro, 0, 9, 3)) posicionarNavio(tabuleiro, 0, 9, 3); // Diagonal ↙

    // Matrizes de habilidades
    int cone[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    int cruz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    int octaedro[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];

    criarHabilidadeCone(cone);
    criarHabilidadeCruz(cruz);
    criarHabilidadeOctaedro(octaedro);

    // Aplicar as habilidades em posições específicas
    aplicarHabilidade(tabuleiro, cone, 4, 4);       // Cone no centro
    aplicarHabilidade(tabuleiro, cruz, 6, 2);       // Cruz em posição inferior esquerda
    aplicarHabilidade(tabuleiro, octaedro, 7, 7);   // Octaedro no canto inferior direito

    // Exibir o tabuleiro final
    exibirTabuleiro(tabuleiro);

    return 0;
}
